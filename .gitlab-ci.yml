stages:
  - build
  - test
  - scan

build:
  stage: build
  image: ubuntu:latest
  cache:
    key: conan-cache
    paths:
      - .conan2/data
      - .conan2/p
  script:
    - apt-get update
    - apt-get install -y cmake g++ python3-pip python3-venv
    - python3 -m venv venv
    - . venv/bin/activate

    # Install Conan 2.x
    - pip install "conan>=2.0"

    # Detect profile (ensures compiler/os/build_type/etc. are set)
    - conan profile detect --force

    # Install dependencies and generate toolchain
    - conan install . --output-folder=build --build=missing

    # Configure and build with CMake using Conan-generated toolchain
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
    - cmake --build .
  artifacts:
    paths:
      - build/LogFileAnalyzer  # Adjust the path if your binary is elsewhere
    expire_in: 1 week          # Optional: artifact retention duration
  only:
    - main
  
sonarqube:
  stage: test
  image: sonarsource/sonar-scanner-cli:5
  script:
    - sonar-scanner
        -Dsonar.projectKey=LogAnalyzer
        -Dsonar.sources=. 
        -Dsonar.exclusions=build/** 
        -Dsonar.language=cpp
        -Dsonar.host.url=http://sonarqube.khangesh.store/
        -Dsonar.token=${SONAR_TOKEN}
  only:
    - main

dependency-check:
  stage: scan
  image: owasp/dependency-check:latest
  script:
    - echo "üîç Creating report directory..."
    - mkdir -p owasp-report

    - echo "üöÄ Running OWASP Dependency Check..."
    - /usr/share/dependency-check/bin/dependency-check.sh \
        --project "LogAnalyzer" \
        --scan src \
        --format HTML \
        --out owasp-report \
        --prettyPrint \
        --log owasp-report/scan.log

    - echo "üìÇ Listing report directory:"
    - ls -R owasp-report || echo "‚ö†Ô∏è Report folder not found!"
  artifacts:
    paths:
      - owasp-report
    when: always
  only:
    - main