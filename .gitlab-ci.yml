stages:
  - build
  - test
  - scan

build:
  stage: build
  image: ubuntu:latest
  cache:
    key: conan-cache
    paths:
      - .conan2/data
      - .conan2/p
  script:
    - apt-get update
    - apt-get install -y cmake g++ python3-pip python3-venv
    - python3 -m venv venv
    - . venv/bin/activate

    # Install Conan 2.x
    - pip install "conan>=2.0"

    # Detect profile (ensures compiler/os/build_type/etc. are set)
    - conan profile detect --force

    # Install dependencies and generate toolchain
    - conan install . --output-folder=build --build=missing

    # Configure and build with CMake using Conan-generated toolchain
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
    - cmake --build .
  artifacts:
    paths:
      - build/LogFileAnalyzer  # Adjust the path if your binary is elsewhere
    expire_in: 1 week          # Optional: artifact retention duration
  only:
    - main
  
sonarqube:
  stage: test
  image: eclipse-temurin:17-jdk
  variables:
    PATH: "$SONAR_SCANNER_HOME/sonar-scanner-$SONAR_SCANNER_VERSION-linux/bin:$PATH"
  script:
    - apt-get update && apt-get install -y unzip curl
    - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
    - unzip sonar-scanner.zip -d $SONAR_SCANNER_HOME
    - sonar-scanner --version

    - sonar-scanner
        -Dsonar.projectKey=LogAnalyzer
        -Dsonar.sources=src
        -Dsonar.cfamily.build-wrapper-output=bw-output
        -Dsonar.host.url=-Dsonar.host.url=http://sonarqube.khangesh.store/
        -Dsonar.login=${SONAR_TOKEN}
  only:
    - main

dependency-check:
  stage: scan
  image: owasp/dependency-check
  script:
    - dependency-check.sh --project LogAnalyzer --scan src --format HTML --out report
  artifacts:
    paths:
      - report/dependency-check-report.html
  only:
    - main
