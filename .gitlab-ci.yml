stages:
  - build
  - test
  - scan

build:
  stage: build
  image: ubuntu:latest
  cache:
    key: conan-cache
    paths:
      - .conan2/data
      - .conan2/p
  script:
    - apt-get update
    - apt-get install -y cmake g++ python3-pip python3-venv
    - python3 -m venv venv
    - . venv/bin/activate

    # Install Conan 2.x
    - pip install "conan>=2.0"

    # Detect profile (ensures compiler/os/build_type/etc. are set)
    - conan profile detect --force

    # Lock dependencies and generate a new lockfile
    - conan lock create . --lockfile-out=conan.lock --profile=default

    # Install dependencies using the newly created lockfile
    - conan install . --lockfile=conan.lock --output-folder=build --build=missing

    # Configure and build with CMake using Conan-generated toolchain
    - cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
    - cmake --build .
  artifacts:
    paths:
      - build/LogFileAnalyzer
      - conan.lock 
    expire_in: 1 week
  only:
    - main

sonarqube:
  stage: test
  image: sonarsource/sonar-scanner-cli:5
  script:
    - |
      sonar-scanner \
        -Dsonar.projectKey=LogAnalyzer \
        -Dsonar.sources=. \
        -Dsonar.exclusions=build/** \
        -Dsonar.language=cpp \
        -Dsonar.host.url=http://sonarqube.khangesh.store/ \
        -Dsonar.token=${SONAR_TOKEN}
  only:
    - main

sca-fossa:
  stage: scan
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y curl cmake g++ python3 python3-pip python3-venv bash ninja-build pkg-config autoconf automake libtool m4 meson
    - python3 -m venv venv
    - ./venv/bin/pip install --cache-dir=.pip-cache "conan>=2.0"
    - ./venv/bin/conan profile detect --force
    - ./venv/bin/conan install . --output-folder=build --build=missing
    - ./venv/bin/conan build .
    - >
      bash -c "curl -H 'Cache-Control: no-cache'
      https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash"
  script:
    - echo "ðŸ”§ Downloading helper script..."
    - curl -sSLo make_fossa_deps_conan.py https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/make_fossa_deps_conan.py

    - echo "ðŸ”§ Patching script to use venv Conan..."
    - sed -i 's/cmd = \["conan"/cmd = ["\.\/venv\/bin\/conan"/' make_fossa_deps_conan.py

    - echo "ðŸ“„ Generating graph JSON file..."
    - ./venv/bin/conan graph info . -f json -c tools.build:download_source=True > conan_graph.json

    - echo "ðŸ“„ Generating fossa-deps.yml..."
    - ./venv/bin/python make_fossa_deps_conan.py conan_graph.json > fossa-deps.yml

    - echo "ðŸš€ Running FOSSA scan..."
    - fossa analyze --detect-vendored 2>&1 | tee fossa-analyze.log
    - fossa test --fail-on HIGH 2>&1 | tee fossa-test.log

  artifacts:
    paths:
      - fossa-deps.yml
      - fossa-analyze.log
      - fossa-test.log
    when: always
    expire_in: 1 week
  only:
    - main
